pipeline {
  agent any

  environment {
    DOCKER_REGISTRY_URL = 'https://index.docker.io/v1/'
    DOCKERHUB_CREDENTIALS = 'jenkins-vivo-dockerhub'
  }

  options {
    buildDiscarder(logRotator(numToKeepStr: '5'))
    disableConcurrentBuilds()
    timeout(time: 60, unit: 'MINUTES')
    timestamps()
  }

  stages {
    stage ('checkout') {
      steps {
        checkout scmGit(branches: [[name: '**']], extensions: [], userRemoteConfigs: [[credentialsId: 'jenkins-github-private', url: 'git@github.com:santonix/weather-app.git']])
      }
    }

    stage('Setup parameters') {
      steps {
        script {
          properties([
            parameters([
              string(name: 'WARNTIME', defaultValue: '2', description: 'Warning time (in minutes) before starting upgrade'),
              string(defaultValue: 'develop', name: 'Please_leave_this_section_as_it_is', trim: true)
            ])
          ])
        }
      }
    }

    stage('Test auth') {
      agent {
        docker {
          image 'golang:alpine'
          args '-u root:root'
        }
      }
      steps {
        sh '''
          id
          cd weatherapp/auth/src/main
          go build
          cd -
          ls -la
        '''
      }
    }

    stage('Test UI') {
      agent {
        docker {
          image 'node:17'
          args '-u root:root'
        }
      }
      steps {
        sh '''
          cd weatherapp/UI
          npm run
        '''
      }
    }

    stage('Test weather') {
      agent {
        docker {
          image 'python:3.8-slim-buster'
          args '-u root:root'
        }
      }
      steps {
        sh '''
          cd weatherapp/weather
          pip3 install -r requirements.txt
        '''
      }
    }

    stage('Build auth') {
      steps {
        sh '''
          cd $WORKSPACE/weatherapp/auth
          docker build -t santonix/santonix-weatherapp-auth:${BUILD_NUMBER} .
        '''
      }
    }

    stage('Push auth') {
      steps {
        script {
          docker.withRegistry(DOCKER_REGISTRY_URL, DOCKERHUB_CREDENTIALS) {
            sh 'docker push santonix/santonix-weatherapp-auth:${BUILD_NUMBER}'
          }
        }
      }
    }

    stage('Build UI') {
      steps {
        sh '''
          cd $WORKSPACE/weatherapp/UI
          docker build -t santonix/santonix-weatherapp-ui:${BUILD_NUMBER} .
        '''
      }
    }

    stage('Push UI') {
      steps {
        script {
          docker.withRegistry(DOCKER_REGISTRY_URL, DOCKERHUB_CREDENTIALS) {
            sh 'docker push santonix/santonix-weatherapp-ui:${BUILD_NUMBER}'
          }
        }
      }
    }

    stage('Build Weather') {
      steps {
        sh '''
          cd $WORKSPACE/weatherapp/weather
          docker build -t santonix/santonix-weatherapp-weather:${BUILD_NUMBER} .
        '''
      }
    }

    stage('Push weather') {
      steps {
        script {
          docker.withRegistry(DOCKER_REGISTRY_URL, DOCKERHUB_CREDENTIALS) {
            sh 'docker push santonix/santonix-weatherapp-weather:${BUILD_NUMBER}'
          }
        }
      }
    }

    stage('Build Redis') {
      steps {
        sh '''
          cd $WORKSPACE/weatherapp/redis
          docker build -t santonix/santonix-weatherapp-redis:${BUILD_NUMBER} .
        '''
      }
    }

    stage('Push redis') {
      steps {
        script {
          docker.withRegistry(DOCKER_REGISTRY_URL, DOCKERHUB_CREDENTIALS) {
            sh 'docker push santonix/santonix-weatherapp-redis:${BUILD_NUMBER}'
          }
        }
      }
    }

    stage('Build db') {
      steps {
        sh '''
          cd $WORKSPACE/weatherapp/db
          docker build -t santonix/santonix-weatherapp-db:${BUILD_NUMBER} .
        '''
      }
    }

    stage('Push db') {
      steps {
        script {
          docker.withRegistry(DOCKER_REGISTRY_URL, DOCKERHUB_CREDENTIALS) {
            sh 'docker push santonix/santonix-weatherapp-db:${BUILD_NUMBER}'
          }
        }
      }
    }

    stage('warning') {
      agent any
      steps {
        script {
          notifyUpgrade(currentBuild.currentResult, "WARNING")
          sleep(time: env.WARNTIME, unit: "MINUTES")
        }
      }
    }
  }
}

